// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model App {
  id String @id @db.Char(3)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens         AppTokens?
  settings       AppSettings?
  users          User[]
  profileRegions ProfileRegion[]
  profiles       Profile[]
  overlays       Overlay[]
  streams        Stream[]
  updates        Update[]
  games          Game[]
  platforms      Platform[]
  groups         Group[]
  trophies       Trophy[]
  stacks         Stack[]
  stackGroups    StackGroup[]
  stackTrophies  StackTrophy[]
  projects       Project[]
  earnedTrophies ProjectTrophy[]
}

model AppTokens {
  appId String @unique @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  accessToken           String?   @db.VarChar(3072)
  expiresAt             DateTime?
  refreshToken          String?   @db.Char(36)
  refreshTokenExpiresAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model AppSettings {
  appId String @unique @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  overlaysEnabled Boolean  @default(false)
  linkingEnabled  Boolean  @default(false)
  updatesEnabled  Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id String @id @db.VarChar(36)

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  username    String   @unique @db.VarChar(25)
  displayName String   @db.VarChar(50)
  imageUrl    String   @db.VarChar(512)
  isAdmin     Boolean
  isFounder   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  image   UserImage?
  profile Profile?

  @@fulltext([displayName])
}

model UserImage {
  userId String @unique @db.VarChar(36)
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  image     Bytes    @db.MediumBlob
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileRegion {
  id String @id @db.Char(2)

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  name           String?  @db.VarChar(64)
  earnedPlatinum Int      @default(0) @db.UnsignedMediumInt
  earnedGold     Int      @default(0) @db.UnsignedInt
  earnedSilver   Int      @default(0) @db.UnsignedInt
  earnedBronze   Int      @default(0) @db.UnsignedInt
  points         Decimal  @default(0) @db.Decimal(13, 2)
  position       Int      @default(0) @db.UnsignedTinyInt
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  profiles        Profile[]
  changes         ProfileRegionChange[]
  positionChanges ProfileRegionPositionChange[]

  @@index([position])
}

model Profile {
  id Int @id @default(autoincrement()) @db.UnsignedSmallInt

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  userId String @unique @db.VarChar(36)
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  regionId String        @db.Char(2)
  region   ProfileRegion @relation(references: [id], fields: [regionId])

  accountId           String    @unique @db.VarChar(36)
  onlineId            String    @unique @db.VarChar(16)
  imageUrl            String    @db.VarChar(512)
  platinum            Int       @db.UnsignedSmallInt
  gold                Int       @db.UnsignedMediumInt
  silver              Int       @db.UnsignedMediumInt
  bronze              Int       @db.UnsignedMediumInt
  lastCheckedAt       DateTime
  firstTrophyEarnedAt DateTime?
  lastTrophyEarnedAt  DateTime?
  startedProjects     Int       @default(0) @db.UnsignedSmallInt
  completedProjects   Int       @default(0) @db.UnsignedSmallInt
  definedPlatinum     Int       @default(0) @db.UnsignedSmallInt
  definedGold         Int       @default(0) @db.UnsignedMediumInt
  definedSilver       Int       @default(0) @db.UnsignedMediumInt
  definedBronze       Int       @default(0) @db.UnsignedMediumInt
  earnedPlatinum      Int       @default(0) @db.UnsignedSmallInt
  earnedGold          Int       @default(0) @db.UnsignedMediumInt
  earnedSilver        Int       @default(0) @db.UnsignedMediumInt
  earnedBronze        Int       @default(0) @db.UnsignedMediumInt
  streamPlatinum      Int       @default(0) @db.UnsignedSmallInt
  streamGold          Int       @default(0) @db.UnsignedMediumInt
  streamSilver        Int       @default(0) @db.UnsignedMediumInt
  streamBronze        Int       @default(0) @db.UnsignedMediumInt
  hiddenTrophies      Int       @default(0) @db.UnsignedMediumInt
  completion          Decimal   @default(0) @db.Decimal(5, 2)
  points              Decimal   @default(0) @db.Decimal(10, 2)
  streamPoints        Decimal   @default(0) @db.Decimal(10, 2)
  timeStreamed        Int       @default(0) @db.UnsignedInt
  lastFullUpdateAt    DateTime?
  profilesCount       Int       @default(0) @db.UnsignedSmallInt
  streamPosition      Int       @default(0) @db.UnsignedSmallInt
  regionalPosition    Int       @default(0) @db.UnsignedSmallInt
  globalPosition      Int       @default(0) @db.UnsignedSmallInt
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  image                  ProfileImage?
  overlay                Overlay?
  streams                Stream[]
  updates                Update[]
  projects               Project[]
  trophies               ProjectTrophy[]
  streamPositionChanges  ProfileStreamPositionChange[]
  regionalPostionChanges ProfileRegionalPositionChange[]
  globalPositionChanges  ProfileGlobalPositionChange[]

  @@index([regionId, regionalPosition])
  @@index([lastFullUpdateAt])
  @@index([streamPoints])
  @@index([timeStreamed])
  @@index([streamPosition])
}

model ProfileImage {
  profileId Int     @unique @db.UnsignedSmallInt
  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)

  image     Bytes    @db.MediumBlob
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OverlayStyle {
  default
  streamer
}

model Overlay {
  id String @id @default(uuid()) @db.VarChar(36)

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  profileId Int     @unique @db.UnsignedSmallInt
  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)

  project Project?

  style          OverlayStyle @default(default)
  lastLiveAt     DateTime?
  showProject    Boolean      @default(false)
  updateProject  Boolean      @default(false)
  updateTrophies Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Stream {
  id String @id @db.VarChar(36)

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  profileId Int     @db.UnsignedSmallInt
  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)

  platinum     Int      @default(0) @db.UnsignedSmallInt
  gold         Int      @default(0) @db.UnsignedMediumInt
  silver       Int      @default(0) @db.UnsignedMediumInt
  bronze       Int      @default(0) @db.UnsignedMediumInt
  timeStreamed Int      @default(0) @db.UnsignedInt
  endsAt       DateTime
  createdAt    DateTime
  updatedAt    DateTime @updatedAt

  projects StreamsOnProjects[]
  trophies ProjectTrophy[]

  @@index([profileId, createdAt, endsAt])
}

enum UpdateStatus {
  WAITING
  RUNNING
  SUCCESSFUL
  FAILED
}

enum UpdateType {
  INITIAL
  MANUAL
  OVERLAY
  AUTOMATIC
  FORCED
}

model Update {
  id Int @id @default(autoincrement()) @db.UnsignedInt

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  profileId Int     @db.UnsignedSmallInt
  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)

  status                UpdateStatus
  type                  UpdateType
  fullUpdate            Boolean
  startedAt             DateTime?
  progress              Int          @default(0) @db.UnsignedTinyInt
  finishedAt            DateTime?
  startedProjectsFrom   Int          @db.UnsignedSmallInt
  startedProjectsTo     Int          @default(0) @db.UnsignedSmallInt
  completedProjectsFrom Int          @db.UnsignedSmallInt
  completedProjectsTo   Int          @default(0) @db.UnsignedSmallInt
  definedPlatinumFrom   Int          @db.UnsignedSmallInt
  definedPlatinumTo     Int          @default(0) @db.UnsignedSmallInt
  definedGoldFrom       Int          @db.UnsignedMediumInt
  definedGoldTo         Int          @default(0) @db.UnsignedMediumInt
  definedSilverFrom     Int          @db.UnsignedMediumInt
  definedSilverTo       Int          @default(0) @db.UnsignedMediumInt
  definedBronzeFrom     Int          @db.UnsignedMediumInt
  definedBronzeTo       Int          @default(0) @db.UnsignedMediumInt
  earnedPlatinumFrom    Int          @db.UnsignedSmallInt
  earnedPlatinumTo      Int          @default(0) @db.UnsignedSmallInt
  earnedGoldFrom        Int          @db.UnsignedMediumInt
  earnedGoldTo          Int          @default(0) @db.UnsignedMediumInt
  earnedSilverFrom      Int          @db.UnsignedMediumInt
  earnedSilverTo        Int          @default(0) @db.UnsignedMediumInt
  earnedBronzeFrom      Int          @db.UnsignedMediumInt
  earnedBronzeTo        Int          @default(0) @db.UnsignedMediumInt
  streamPlatinumFrom    Int          @db.UnsignedSmallInt
  streamPlatinumTo      Int          @default(0) @db.UnsignedSmallInt
  streamGoldFrom        Int          @db.UnsignedMediumInt
  streamGoldTo          Int          @default(0) @db.UnsignedMediumInt
  streamSilverFrom      Int          @db.UnsignedMediumInt
  streamSilverTo        Int          @default(0) @db.UnsignedMediumInt
  streamBronzeFrom      Int          @db.UnsignedMediumInt
  streamBronzeTo        Int          @default(0) @db.UnsignedMediumInt
  hiddenTrophiesFrom    Int          @db.UnsignedMediumInt
  hiddenTrophiesTo      Int          @default(0) @db.UnsignedMediumInt
  completionFrom        Decimal      @db.Decimal(5, 2)
  completionTo          Decimal      @default(0) @db.Decimal(5, 2)
  pointsFrom            Decimal      @db.Decimal(10, 2)
  pointsTo              Decimal      @default(0) @db.Decimal(10, 2)
  streamPointsFrom      Decimal      @db.Decimal(10, 2)
  streamPointsTo        Decimal      @default(0) @db.Decimal(10, 2)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  changes ProjectChange[]

  @@index([profileId, type])
  @@index([profileId, status])
  @@index([status])
}

model Game {
  id Int @id @default(autoincrement()) @db.UnsignedSmallInt

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  hash            String   @unique @db.Char(32)
  service         String   @db.VarChar(7)
  name            String   @db.VarChar(512)
  imageUrl        String   @db.VarChar(512)
  definedPlatinum Int      @default(0) @db.UnsignedTinyInt
  definedGold     Int      @default(0) @db.UnsignedSmallInt
  definedSilver   Int      @default(0) @db.UnsignedSmallInt
  definedBronze   Int      @default(0) @db.UnsignedSmallInt
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  image     GameImage?
  platforms PlatformsOnGames[]
  groups    Group[]
  stacks    Stack[]

  @@fulltext([name])
}

model GameImage {
  gameId Int  @unique @db.UnsignedSmallInt
  game   Game @relation(references: [id], fields: [gameId], onDelete: Cascade)

  image     Bytes    @db.MediumBlob
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Platform {
  id String @id @db.VarChar(6)

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  games PlatformsOnGames[]
}

model PlatformsOnGames {
  gameId Int  @db.UnsignedSmallInt
  game   Game @relation(references: [id], fields: [gameId], onDelete: Cascade)

  platformId String   @db.VarChar(6)
  platform   Platform @relation(references: [id], fields: [platformId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([gameId, platformId])
  @@index([platformId])
}

model Group {
  gameId Int  @db.UnsignedSmallInt
  game   Game @relation(references: [id], fields: [gameId], onDelete: Cascade)

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  id              String   @db.Char(3)
  name            String   @db.VarChar(512)
  imageUrl        String   @db.VarChar(512)
  definedPlatinum Int      @default(0) @db.UnsignedTinyInt
  definedGold     Int      @default(0) @db.UnsignedTinyInt
  definedSilver   Int      @default(0) @db.UnsignedTinyInt
  definedBronze   Int      @default(0) @db.UnsignedTinyInt
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  image       GroupImage?
  trophies    Trophy[]
  stackGroups StackGroup[]

  @@id([gameId, id])
}

model GroupImage {
  gameId  Int    @db.UnsignedSmallInt
  groupId String @db.Char(3)
  group   Group  @relation(references: [gameId, id], fields: [gameId, groupId], onDelete: Cascade)

  image     Bytes    @db.MediumBlob
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([gameId, groupId])
}

enum TrophyType {
  platinum
  gold
  silver
  bronze
}

model Trophy {
  gameId  Int    @db.UnsignedSmallInt
  groupId String @db.Char(3)
  group   Group  @relation(fields: [gameId, groupId], references: [gameId, id], onDelete: Cascade)

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  id          Int        @db.UnsignedSmallInt
  type        TrophyType
  name        String     @db.VarChar(512)
  description String     @db.VarChar(1024)
  imageUrl    String     @db.VarChar(512)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  image         TrophyImage?
  stackTrophies StackTrophy[]

  @@id([gameId, groupId, id])
}

model TrophyImage {
  gameId   Int    @db.UnsignedSmallInt
  groupId  String @db.Char(3)
  trophyId Int    @db.UnsignedSmallInt
  trophy   Trophy @relation(references: [gameId, groupId, id], fields: [gameId, groupId, trophyId], onDelete: Cascade)

  image     Bytes    @db.MediumBlob
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([gameId, groupId, trophyId])
}

model Stack {
  id String @id @db.VarChar(36)

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  gameId Int  @db.UnsignedSmallInt
  game   Game @relation(references: [id], fields: [gameId])

  definedPlatinum     Int       @default(0) @db.UnsignedTinyInt
  definedGold         Int       @default(0) @db.UnsignedSmallInt
  definedSilver       Int       @default(0) @db.UnsignedSmallInt
  definedBronze       Int       @default(0) @db.UnsignedSmallInt
  firstTrophyEarnedAt DateTime?
  lastTrophyEarnedAt  DateTime?
  quality             Decimal   @default(0) @db.Decimal(5, 2)
  profilesCount       Int       @default(0) @db.UnsignedSmallInt
  timesStarted        Int       @default(0) @db.UnsignedSmallInt
  timesCompleted      Int       @default(0) @db.UnsignedSmallInt
  avgProgress         Int       @default(0) @db.UnsignedTinyInt
  value               Decimal   @default(0) @db.Decimal(7, 2)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  groups   StackGroup[]
  projects Project[]
  changes  StackChange[]

  @@index([gameId])
}

model StackGroup {
  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  stackId String @db.VarChar(36)
  stack   Stack  @relation(references: [id], fields: [stackId])

  gameId    Int    @db.UnsignedSmallInt
  groupId   String @db.Char(3)
  gameGroup Group  @relation(fields: [gameId, groupId], references: [gameId, id])

  definedPlatinum     Int       @default(0) @db.UnsignedTinyInt
  definedGold         Int       @default(0) @db.UnsignedTinyInt
  definedSilver       Int       @default(0) @db.UnsignedTinyInt
  definedBronze       Int       @default(0) @db.UnsignedTinyInt
  firstTrophyEarnedAt DateTime?
  lastTrophyEarnedAt  DateTime?
  quality             Decimal   @default(0) @db.Decimal(5, 2)
  profilesCount       Int       @default(0) @db.UnsignedSmallInt
  timesCompleted      Int       @default(0) @db.UnsignedSmallInt
  avgProgress         Int       @default(0) @db.UnsignedTinyInt
  value               Decimal   @default(0) @db.Decimal(7, 2)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  trophies      StackTrophy[]
  projectGroups ProjectGroup[]
  changes       StackGroupChange[]

  @@id([stackId, groupId])
}

model StackTrophy {
  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  stackId    String     @db.VarChar(36)
  groupId    String     @db.Char(3)
  stackGroup StackGroup @relation(fields: [stackId, groupId], references: [stackId, groupId])

  gameId     Int    @db.UnsignedSmallInt
  trophyId   Int    @db.UnsignedSmallInt
  gameTrophy Trophy @relation(fields: [gameId, groupId, trophyId], references: [gameId, groupId, id])

  firstEarnedAt DateTime?
  lastEarnedAt  DateTime?
  psnRate       Decimal   @default(0) @db.Decimal(5, 2)
  quality       Decimal   @default(0) @db.Decimal(5, 2)
  timesEarned   Int       @default(0) @db.UnsignedSmallInt
  rarity        Decimal   @default(0) @db.Decimal(5, 2)
  value         Decimal   @default(0) @db.Decimal(5, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  projectTrophies ProjectTrophy[]
  changes         StackTrophyChange[]

  @@id([stackId, groupId, trophyId])
  @@index([stackId, groupId])
  @@index([gameId, trophyId])
}

model Project {
  profileId Int     @db.UnsignedSmallInt
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  overlayId String?  @unique @db.VarChar(36)
  overlay   Overlay? @relation(fields: [overlayId], references: [id], onDelete: SetNull)

  stackId String @db.VarChar(36)
  stack   Stack  @relation(fields: [stackId], references: [id])

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  earnedPlatinum      Int       @default(0) @db.UnsignedTinyInt
  earnedGold          Int       @default(0) @db.UnsignedSmallInt
  earnedSilver        Int       @default(0) @db.UnsignedSmallInt
  earnedBronze        Int       @default(0) @db.UnsignedSmallInt
  streamPlatinum      Int       @default(0) @db.UnsignedTinyInt
  streamGold          Int       @default(0) @db.UnsignedSmallInt
  streamSilver        Int       @default(0) @db.UnsignedSmallInt
  streamBronze        Int       @default(0) @db.UnsignedSmallInt
  firstTrophyEarnedAt DateTime?
  lastTrophyEarnedAt  DateTime?
  progress            Int       @default(0) @db.UnsignedTinyInt
  value               Decimal   @default(0) @db.Decimal(7, 2)
  points              Decimal   @default(0) @db.Decimal(7, 2)
  streamPoints        Decimal   @default(0) @db.Decimal(7, 2)
  timeStreamed        Int       @default(0) @db.UnsignedInt
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  streams StreamsOnProjects[]
  groups  ProjectGroup[]
  changes ProjectChange[]

  @@id([profileId, stackId])
  @@index([profileId])
  @@index([stackId, progress])
}

model StreamsOnProjects {
  streamId String @db.VarChar(36)
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  profileId Int     @db.UnsignedSmallInt
  stackId   String  @db.VarChar(36)
  project   Project @relation(fields: [profileId, stackId], references: [profileId, stackId])

  timeStreamed Int      @db.UnsignedInt
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([streamId, profileId, stackId])
  @@index([profileId, stackId])
}

model ProjectGroup {
  profileId Int     @db.UnsignedSmallInt
  stackId   String  @db.VarChar(36)
  project   Project @relation(fields: [profileId, stackId], references: [profileId, stackId], onDelete: Cascade)

  groupId    String     @db.Char(3)
  stackGroup StackGroup @relation(fields: [stackId, groupId], references: [stackId, groupId])

  earnedPlatinum      Int       @default(0) @db.UnsignedTinyInt
  earnedGold          Int       @default(0) @db.UnsignedSmallInt
  earnedSilver        Int       @default(0) @db.UnsignedSmallInt
  earnedBronze        Int       @default(0) @db.UnsignedSmallInt
  streamPlatinum      Int       @default(0) @db.UnsignedTinyInt
  streamGold          Int       @default(0) @db.UnsignedSmallInt
  streamSilver        Int       @default(0) @db.UnsignedSmallInt
  streamBronze        Int       @default(0) @db.UnsignedSmallInt
  firstTrophyEarnedAt DateTime?
  lastTrophyEarnedAt  DateTime?
  progress            Int       @default(0) @db.UnsignedTinyInt
  value               Decimal   @default(0) @db.Decimal(7, 2)
  points              Decimal   @default(0) @db.Decimal(7, 2)
  streamPoints        Decimal   @default(0) @db.Decimal(7, 2)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  trophies ProjectTrophy[]
  changes  ProjectGroupChange[]

  @@id([profileId, stackId, groupId])
  @@index([profileId, stackId])
  @@index([stackId, groupId])
}

model ProjectTrophy {
  profileId Int     @db.UnsignedSmallInt
  profile   Profile @relation(fields: [profileId], references: [id])

  stackId      String       @db.VarChar(36)
  groupId      String       @db.Char(3)
  projectGroup ProjectGroup @relation(fields: [profileId, stackId, groupId], references: [profileId, stackId, groupId], onDelete: Cascade)

  trophyId    Int         @db.UnsignedSmallInt
  stackTrophy StackTrophy @relation(fields: [stackId, groupId, trophyId], references: [stackId, groupId, trophyId])

  appId String @default("app") @db.Char(3)
  app   App    @relation(references: [id], fields: [appId])

  streamId String? @db.VarChar(36)
  stream   Stream? @relation(fields: [streamId], references: [id], onDelete: Cascade)

  earnedAt  DateTime?
  points    Decimal   @db.Decimal(5, 2)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  changes ProjectTrophyChange[]

  @@id([profileId, stackId, groupId, trophyId])
  @@index([profileId, stackId, groupId])
  @@index([streamId])
}

model ProjectChange {
  updateId Int    @db.UnsignedInt
  update   Update @relation(fields: [updateId], references: [id], onDelete: Cascade)

  profileId Int     @db.UnsignedSmallInt
  stackId   String  @db.VarChar(36)
  project   Project @relation(fields: [profileId, stackId], references: [profileId, stackId], onDelete: Cascade)

  earnedPlatinumFrom Int      @db.UnsignedTinyInt
  earnedPlatinumTo   Int      @default(0) @db.UnsignedTinyInt
  earnedGoldFrom     Int      @db.UnsignedSmallInt
  earnedGoldTo       Int      @default(0) @db.UnsignedSmallInt
  earnedSilverFrom   Int      @db.UnsignedSmallInt
  earnedSilverTo     Int      @default(0) @db.UnsignedSmallInt
  earnedBronzeFrom   Int      @db.UnsignedSmallInt
  earnedBronzeTo     Int      @default(0) @db.UnsignedSmallInt
  streamPlatinumFrom Int      @db.UnsignedTinyInt
  streamPlatinumTo   Int      @default(0) @db.UnsignedTinyInt
  streamGoldFrom     Int      @db.UnsignedSmallInt
  streamGoldTo       Int      @default(0) @db.UnsignedSmallInt
  streamSilverFrom   Int      @db.UnsignedSmallInt
  streamSilverTo     Int      @default(0) @db.UnsignedSmallInt
  streamBronzeFrom   Int      @db.UnsignedSmallInt
  streamBronzeTo     Int      @default(0) @db.UnsignedSmallInt
  progressFrom       Int      @db.UnsignedTinyInt
  progressTo         Int      @default(0) @db.UnsignedTinyInt
  pointsFrom         Decimal  @db.Decimal(8, 2)
  pointsTo           Decimal  @default(0) @db.Decimal(8, 2)
  streamPointsFrom   Decimal  @db.Decimal(8, 2)
  streamPointsTo     Decimal  @default(0) @db.Decimal(8, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  groupChanges ProjectGroupChange[]

  @@id([updateId, stackId])
  @@index([updateId])
  @@index([profileId, stackId])
}

model ProjectGroupChange {
  updateId      Int           @db.UnsignedInt
  stackId       String        @db.VarChar(36)
  projectChange ProjectChange @relation(fields: [updateId, stackId], references: [updateId, stackId], onDelete: Cascade)

  profileId    Int          @db.UnsignedSmallInt
  groupId      String       @db.Char(3)
  projectGroup ProjectGroup @relation(fields: [profileId, stackId, groupId], references: [profileId, stackId, groupId], onDelete: Cascade)

  earnedPlatinumFrom Int      @db.UnsignedTinyInt
  earnedPlatinumTo   Int      @default(0) @db.UnsignedTinyInt
  earnedGoldFrom     Int      @db.UnsignedSmallInt
  earnedGoldTo       Int      @default(0) @db.UnsignedSmallInt
  earnedSilverFrom   Int      @db.UnsignedSmallInt
  earnedSilverTo     Int      @default(0) @db.UnsignedSmallInt
  earnedBronzeFrom   Int      @db.UnsignedSmallInt
  earnedBronzeTo     Int      @default(0) @db.UnsignedSmallInt
  streamPlatinumFrom Int      @db.UnsignedTinyInt
  streamPlatinumTo   Int      @default(0) @db.UnsignedTinyInt
  streamGoldFrom     Int      @db.UnsignedSmallInt
  streamGoldTo       Int      @default(0) @db.UnsignedSmallInt
  streamSilverFrom   Int      @db.UnsignedSmallInt
  streamSilverTo     Int      @default(0) @db.UnsignedSmallInt
  streamBronzeFrom   Int      @db.UnsignedSmallInt
  streamBronzeTo     Int      @default(0) @db.UnsignedSmallInt
  progressFrom       Int      @db.UnsignedTinyInt
  progressTo         Int      @default(0) @db.UnsignedTinyInt
  pointsFrom         Decimal  @db.Decimal(8, 2)
  pointsTo           Decimal  @default(0) @db.Decimal(8, 2)
  streamPointsFrom   Decimal  @db.Decimal(8, 2)
  streamPointsTo     Decimal  @default(0) @db.Decimal(8, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  trophyChanges ProjectTrophyChange[]

  @@id([updateId, stackId, groupId])
  @@index([profileId, stackId, groupId])
}

model ProjectTrophyChange {
  updateId           Int                @db.UnsignedInt
  stackId            String             @db.VarChar(36)
  groupId            String             @db.Char(3)
  projectGroupChange ProjectGroupChange @relation(fields: [updateId, stackId, groupId], references: [updateId, stackId, groupId], onDelete: Cascade)

  profileId     Int           @db.UnsignedSmallInt
  trophyId      Int           @db.UnsignedSmallInt
  projectTrophy ProjectTrophy @relation(fields: [profileId, stackId, groupId, trophyId], references: [profileId, stackId, groupId, trophyId], onDelete: Cascade)

  pointsFrom Decimal  @db.Decimal(7, 2)
  pointsTo   Decimal  @db.Decimal(7, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([updateId, stackId, groupId, trophyId])
  @@index([profileId, stackId, groupId, trophyId])
}

model StackChange {
  id String @id @default(uuid()) @db.Char(36)

  stackId String @db.VarChar(36)
  stack   Stack  @relation(fields: [stackId], references: [id])

  definedPlatinumFrom Int      @db.UnsignedTinyInt
  definedPlatinumTo   Int      @default(0) @db.UnsignedTinyInt
  definedGoldFrom     Int      @db.UnsignedSmallInt
  definedGoldTo       Int      @default(0) @db.UnsignedSmallInt
  definedSilverFrom   Int      @db.UnsignedSmallInt
  definedSilverTo     Int      @default(0) @db.UnsignedSmallInt
  definedBronzeFrom   Int      @db.UnsignedSmallInt
  definedBronzeTo     Int      @default(0) @db.UnsignedSmallInt
  qualityFrom         Decimal  @db.Decimal(5, 2)
  qualityTo           Decimal  @default(0) @db.Decimal(5, 2)
  timesStartedFrom    Int      @db.UnsignedSmallInt
  timesStartedTo      Int      @default(0) @db.UnsignedSmallInt
  timesCompletedFrom  Int      @db.UnsignedSmallInt
  timesCompletedTo    Int      @default(0) @db.UnsignedSmallInt
  avgProgressFrom     Int      @db.UnsignedTinyInt
  avgProgressTo       Int      @default(0) @db.UnsignedTinyInt
  valueFrom           Decimal  @db.Decimal(8, 2)
  valueTo             Decimal  @default(0) @db.Decimal(8, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  groupChanges StackGroupChange[]

  @@index([stackId])
}

model StackGroupChange {
  stackChangeId String      @db.Char(36)
  stackChange   StackChange @relation(fields: [stackChangeId], references: [id], onDelete: Cascade)

  stackId    String     @db.VarChar(36)
  groupId    String     @db.Char(3)
  stackGroup StackGroup @relation(fields: [stackId, groupId], references: [stackId, groupId])

  definedPlatinumFrom Int      @db.UnsignedTinyInt
  definedPlatinumTo   Int      @default(0) @db.UnsignedTinyInt
  definedGoldFrom     Int      @db.UnsignedTinyInt
  definedGoldTo       Int      @default(0) @db.UnsignedTinyInt
  definedSilverFrom   Int      @db.UnsignedTinyInt
  definedSilverTo     Int      @default(0) @db.UnsignedTinyInt
  definedBronzeFrom   Int      @db.UnsignedTinyInt
  definedBronzeTo     Int      @default(0) @db.UnsignedTinyInt
  qualityFrom         Decimal  @db.Decimal(5, 2)
  qualityTo           Decimal  @default(0) @db.Decimal(5, 2)
  timesCompletedFrom  Int      @db.UnsignedSmallInt
  timesCompletedTo    Int      @default(0) @db.UnsignedSmallInt
  avgProgressFrom     Int      @db.UnsignedTinyInt
  avgProgressTo       Int      @default(0) @db.UnsignedTinyInt
  valueFrom           Decimal  @db.Decimal(8, 2)
  valueTo             Decimal  @default(0) @db.Decimal(8, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  trophyChanges StackTrophyChange[]

  @@id([stackChangeId, stackId, groupId])
  @@index([stackId, groupId])
}

model StackTrophyChange {
  stackChangeId    String           @db.Char(36)
  stackId          String           @db.VarChar(36)
  groupId          String           @db.Char(3)
  stackGroupChange StackGroupChange @relation(fields: [stackChangeId, stackId, groupId], references: [stackChangeId, stackId, groupId], onDelete: Cascade)

  trophyId    Int         @db.UnsignedSmallInt
  StackTrophy StackTrophy @relation(fields: [stackId, groupId, trophyId], references: [stackId, groupId, trophyId])

  psnRateFrom     Decimal  @db.Decimal(5, 2)
  psnRateTo       Decimal  @default(0) @db.Decimal(5, 2)
  qualityFrom     Decimal  @db.Decimal(5, 2)
  qualityTo       Decimal  @default(0) @db.Decimal(5, 2)
  timesEarnedFrom Int      @db.UnsignedSmallInt
  timesEarnedTo   Int      @default(0) @db.UnsignedSmallInt
  rarityFrom      Decimal  @db.Decimal(5, 2)
  rarityTo        Decimal  @default(1) @db.Decimal(5, 2)
  valueFrom       Decimal  @db.Decimal(7, 2)
  valueTo         Decimal  @default(0) @db.Decimal(7, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@id([stackChangeId, stackId, groupId, trophyId])
  @@index([stackId, groupId, trophyId])
}

model ProfileRegionChange {
  id String @id @default(uuid()) @db.Char(36)

  regionId      String        @db.Char(2)
  profileRegion ProfileRegion @relation(fields: [regionId], references: [id])

  earnedPlatinumFrom Int      @db.UnsignedMediumInt
  earnedPlatinumTo   Int      @db.UnsignedMediumInt
  earnedGoldFrom     Int      @db.UnsignedInt
  earnedGoldTo       Int      @db.UnsignedInt
  earnedSilverFrom   Int      @db.UnsignedInt
  earnedSilverTo     Int      @db.UnsignedInt
  earnedBronzeFrom   Int      @db.UnsignedInt
  earnedBronzeTo     Int      @db.UnsignedInt
  pointsFrom         Decimal  @db.Decimal(13, 2)
  pointsTo           Decimal  @db.Decimal(13, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([regionId])
}

model ProfileRegionPositionChange {
  id String @id @default(uuid()) @db.Char(36)

  regionId      String        @db.Char(2)
  profileRegion ProfileRegion @relation(fields: [regionId], references: [id])

  positionFrom Int      @db.UnsignedTinyInt
  positionTo   Int      @db.UnsignedTinyInt
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([regionId])
}

model ProfileStreamPositionChange {
  id String @id @default(uuid()) @db.Char(36)

  profileId Int     @db.UnsignedSmallInt
  profile   Profile @relation(fields: [profileId], references: [id])

  streamPositionFrom Int      @db.UnsignedSmallInt
  streamPositionTo   Int      @db.UnsignedSmallInt
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([profileId])
}

model ProfileRegionalPositionChange {
  id String @id @default(uuid()) @db.Char(36)

  profileId Int     @db.UnsignedSmallInt
  profile   Profile @relation(fields: [profileId], references: [id])

  regionalPositionFrom Int      @db.UnsignedSmallInt
  regionalPositionTo   Int      @db.UnsignedSmallInt
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([profileId])
}

model ProfileGlobalPositionChange {
  id String @id @default(uuid()) @db.Char(36)

  profileId Int     @db.UnsignedSmallInt
  profile   Profile @relation(fields: [profileId], references: [id])

  globalPositionFrom Int      @db.UnsignedSmallInt
  globalPositionTo   Int      @db.UnsignedSmallInt
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([profileId])
}
